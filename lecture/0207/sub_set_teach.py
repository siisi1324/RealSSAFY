# sub_set(부분집합) 구하기
# 모든 부분집합의 집합 >> power_set(멱집합)


arr = ['a', 'b', 'c']

N = len(arr)
# check = [0] * N # 요소가 부분집합에 포함되는지 아닌지를 0또는 1로 표시하는배열
# ex) check = [1,0,1] >>> [a,c]
# 0번 인덱스에 0또는 1넣기
for i in range(2): # i는 0 또는 1
    check[0] = i
    for j in range(2):
        check[1] = j
        for k in range(2):
            check[2] = k
            # check의 요소가 1이면 출력 0이면 출력 x
            for a in range(N):
                if check[a]:
                    print(arr[a],end=',')
#             print() # 부분집합 하나 출력 끝났으니 한 줄 내려주기

# 알고리즘 문제의 기본 >>>
# 완전탐색 : 배열 순회, 순열, 조합, 집합...


# 0, 1로 만든 순열로 비트확인
# 모든 부분집합의 모양을 확인하기 위해서
# 숫자의 비트를 보겠다. 
# 비트연산자를 활용하자..!
# & : 양쪽비교비트가 둘다 1이면 1튀어나온다. 
# 5 & 3
#  101
# &011
# 3의 비트 모양은 어떻게 할건데?

# ========

# 3 & 001 >>> 3 & 1
# 3 & 010 >>> 3 & 2
# 3 & 100 << 2

# 3 & 1 << 0
# 3 & 1 << 1
# 3 % 1 << 3

# # >> 
# 우리가 해야핧 일
# 숫자를 0부터 7까지 숫자의 비트 확인하기
arr = ['a', 'b', 'c']
N = len(arr)
# for i in range(2**N): 왼쪽으로 1비트 밀면 곱하기 2
# 1 << N == 2 ** 2
for i in range(2**3):
    for i in range(1 << N):
        # i의 비트 모양 확인하기 : 각 비트에 001, 010, 100 & dustks
        for j in range(N):
            if i & 1 << j : # i & 001, i & 010, i & 100 :
                print(arr[j], end=',')
        print()
    print() # 한 부분집합 모양 확인 끝